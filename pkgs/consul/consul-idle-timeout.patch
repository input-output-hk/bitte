diff --git i/agent/xds/config.go w/agent/xds/config.go
index 2fdf9d115..1c84b7b15 100644
--- i/agent/xds/config.go
+++ w/agent/xds/config.go
@@ -38,6 +38,12 @@ type ProxyConfig struct {
 	// set.
 	LocalConnectTimeoutMs int `mapstructure:"local_connect_timeout_ms"`
 
+	// LocalIdleTimeoutMs is the number of milliseconds a request's stream to the
+	// local app instance may be idle. If not set, no value is set, Envoy defaults
+	// are respected, and an Envoy stream_idle_timeout (5m) will apply. If set,
+	// this LocalIdleTimeoutMs value will override the Envoy stream_idle_timeout.
+	LocalIdleTimeoutMs *int `mapstructure:"local_idle_timeout_ms"`
+
 	// LocalRequestTimeoutMs is the number of milliseconds to timeout HTTP requests
 	// to the local app instance. If not set, no value is set, Envoy defaults are
 	// respected (15s)
diff --git i/agent/xds/listeners.go w/agent/xds/listeners.go
index 95b84c94c..8a15cff74 100644
--- i/agent/xds/listeners.go
+++ w/agent/xds/listeners.go
@@ -1193,6 +1193,7 @@ func (s *ResourceGenerator) makeInboundListener(cfgSnap *proxycfg.ConfigSnapshot
 		filterName:       name,
 		routeName:        name,
 		cluster:          LocalAppClusterName,
+		idleTimeoutMs:    cfg.LocalIdleTimeoutMs,
 		requestTimeoutMs: cfg.LocalRequestTimeoutMs,
 	}
 	if useHTTPFilter {
@@ -1939,6 +1940,7 @@ type listenerFilterOpts struct {
 	cluster              string
 	statPrefix           string
 	routePath            string
+	idleTimeoutMs        *int
 	requestTimeoutMs     *int
 	ingressGateway       bool
 	httpAuthzFilter      *envoy_http_v3.HttpFilter
@@ -2062,6 +2064,11 @@ func makeHTTPFilter(opts listenerFilterOpts) (*envoy_listener_v3.Filter, error)
 			},
 		}
 
+		if opts.idleTimeoutMs != nil {
+			r := route.GetRoute()
+			r.IdleTimeout = durationpb.New(time.Duration(*opts.idleTimeoutMs) * time.Millisecond)
+		}
+
 		if opts.requestTimeoutMs != nil {
 			r := route.GetRoute()
 			r.Timeout = durationpb.New(time.Duration(*opts.requestTimeoutMs) * time.Millisecond)
